$date
	Thu Jul  3 00:36:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tt_um_FFT_engine_tb $end
$var wire 1 ! clk $end
$var wire 1 " ena $end
$var wire 1 # rst_n $end
$var wire 8 $ ui_in [7:0] $end
$var wire 8 % uio_in [7:0] $end
$var wire 8 & uo_out [7:0] $end
$var wire 8 ' uio_out [7:0] $end
$var wire 8 ( uio_oe [7:0] $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " ena $end
$var wire 1 ) rst $end
$var wire 1 # rst_n $end
$var wire 8 * sample0_imag [7:0] $end
$var wire 8 + sample0_real [7:0] $end
$var wire 8 , sample1_imag [7:0] $end
$var wire 8 - sample1_real [7:0] $end
$var wire 8 . sample2_imag [7:0] $end
$var wire 8 / sample2_real [7:0] $end
$var wire 8 0 sample3_imag [7:0] $end
$var wire 8 1 sample3_real [7:0] $end
$var wire 8 2 ui_in [7:0] $end
$var wire 8 3 uio_in [7:0] $end
$var wire 8 4 uo_out [7:0] $end
$var wire 1 5 output_pulse $end
$var wire 1 6 load_pulse $end
$var wire 8 7 fft3_real [7:0] $end
$var wire 8 8 fft3_imag [7:0] $end
$var wire 8 9 fft2_real [7:0] $end
$var wire 8 : fft2_imag [7:0] $end
$var wire 8 ; fft1_real [7:0] $end
$var wire 8 < fft1_imag [7:0] $end
$var wire 8 = fft0_real [7:0] $end
$var wire 8 > fft0_imag [7:0] $end
$var wire 2 ? addr [1:0] $end
$var reg 1 @ done $end
$var reg 2 A output_counter [1:0] $end
$var reg 1 B processing $end
$var reg 8 C uio_oe [7:0] $end
$var reg 8 D uio_out [7:0] $end
$scope module disp_inst $end
$var wire 1 @ done $end
$var wire 2 E output_counter [1:0] $end
$var wire 1 B processing $end
$var wire 2 F sample_counter [1:0] $end
$var reg 8 G seg_out [7:0] $end
$upscope $end
$scope module fft_inst $end
$var wire 1 ! clk $end
$var wire 8 H in0_imag [7:0] $end
$var wire 8 I in0_real [7:0] $end
$var wire 8 J in1_imag [7:0] $end
$var wire 8 K in1_real [7:0] $end
$var wire 8 L in2_imag [7:0] $end
$var wire 8 M in2_real [7:0] $end
$var wire 8 N in3_imag [7:0] $end
$var wire 8 O in3_real [7:0] $end
$var wire 1 ) rst $end
$var wire 8 P bfly_pos_real [7:0] $end
$var wire 8 Q bfly_pos_imag [7:0] $end
$var wire 8 R bfly_neg_real [7:0] $end
$var wire 8 S bfly_neg_imag [7:0] $end
$var reg 8 T out0_imag [7:0] $end
$var reg 8 U out0_real [7:0] $end
$var reg 8 V out1_imag [7:0] $end
$var reg 8 W out1_real [7:0] $end
$var reg 8 X out2_imag [7:0] $end
$var reg 8 Y out2_real [7:0] $end
$var reg 8 Z out3_imag [7:0] $end
$var reg 8 [ out3_real [7:0] $end
$scope module bfly_stage1_0 $end
$var wire 8 \ A_imag [7:0] $end
$var wire 8 ] A_real [7:0] $end
$var wire 8 ^ B_imag [7:0] $end
$var wire 8 _ B_real [7:0] $end
$var wire 8 ` W_imag [7:0] $end
$var wire 8 a W_real [7:0] $end
$var wire 16 b product_real [15:0] $end
$var wire 16 c product_imag [15:0] $end
$var wire 8 d Pos_real [7:0] $end
$var wire 8 e Pos_imag [7:0] $end
$var wire 8 f Neg_real [7:0] $end
$var wire 8 g Neg_imag [7:0] $end
$upscope $end
$scope module bfly_stage1_1 $end
$var wire 8 h A_imag [7:0] $end
$var wire 8 i A_real [7:0] $end
$var wire 8 j B_imag [7:0] $end
$var wire 8 k B_real [7:0] $end
$var wire 8 l W_imag [7:0] $end
$var wire 8 m W_real [7:0] $end
$var wire 16 n product_real [15:0] $end
$var wire 16 o product_imag [15:0] $end
$var wire 8 p Pos_real [7:0] $end
$var wire 8 q Pos_imag [7:0] $end
$var wire 8 r Neg_real [7:0] $end
$var wire 8 s Neg_imag [7:0] $end
$upscope $end
$scope module bfly_stage2_1 $end
$var wire 8 t A_imag [7:0] $end
$var wire 8 u A_real [7:0] $end
$var wire 8 v B_imag [7:0] $end
$var wire 8 w B_real [7:0] $end
$var wire 8 x W_imag [7:0] $end
$var wire 8 y W_real [7:0] $end
$var wire 16 z product_real [15:0] $end
$var wire 16 { product_imag [15:0] $end
$var wire 8 | Pos_real [7:0] $end
$var wire 8 } Pos_imag [7:0] $end
$var wire 8 ~ Neg_real [7:0] $end
$var wire 8 !" Neg_imag [7:0] $end
$upscope $end
$upscope $end
$scope module io_inst $end
$var wire 2 "" addr [1:0] $end
$var wire 1 ! clk $end
$var wire 1 " ena $end
$var wire 1 6 load_pulse $end
$var wire 1 5 output_pulse $end
$var wire 1 ) rst $end
$var wire 1 #" ui_in0 $end
$var wire 1 $" ui_in1 $end
$var reg 2 %" counter [1:0] $end
$var reg 1 &" prev_in0 $end
$var reg 1 '" prev_in1 $end
$upscope $end
$scope module mem_inst $end
$var wire 2 (" addr [1:0] $end
$var wire 1 ! clk $end
$var wire 8 )" data_in [7:0] $end
$var wire 1 " ena $end
$var wire 8 *" imag0_out [7:0] $end
$var wire 8 +" imag1_out [7:0] $end
$var wire 8 ," imag2_out [7:0] $end
$var wire 8 -" imag3_out [7:0] $end
$var wire 1 6 load_pulse $end
$var wire 8 ." real0_out [7:0] $end
$var wire 8 /" real1_out [7:0] $end
$var wire 8 0" real2_out [7:0] $end
$var wire 8 1" real3_out [7:0] $end
$var wire 1 ) rst $end
$var integer 32 2" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
0'"
0&"
b0 %"
0$"
0#"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b10000000 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b10000000 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b10000000 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b1100 G
b0 F
b0 E
b0 D
b0 C
0B
b0 A
0@
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
06
05
b1100 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
1)
b0 (
b0 '
b1100 &
b0 %
b0 $
0#
0"
1!
$end
#5000
0!
#10000
0)
1!
1#
#10001
b100 2"
1)
0#
#15001
0!
#20001
16
1#"
b1 $
b1 2
b10010 %
b10010 3
b10010 )"
1"
0)
1!
1#
#25001
0!
#30001
0#"
b0 $
b0 2
b100000 Q
b100000 }
b100000 S
b100000 !"
b10000 P
b10000 |
b10000 R
b10000 ~
b1011010 &
b1011010 4
b1011010 G
06
b100000 e
b100000 g
b100000 t
b10000 d
b10000 f
b10000 u
b1 ?
b1 F
b1 ""
b1 ("
b1 %"
1&"
b100000 *
b100000 H
b100000 \
b100000 *"
b10000 +
b10000 I
b10000 ]
b10000 ."
1!
#35001
0!
#40001
16
1#"
b1 $
b1 2
b110100 %
b110100 3
b110100 )"
b10010 '
b10010 D
b100000 8
b100000 Z
b10000 7
b10000 [
b100000 <
b100000 V
b10000 ;
b10000 W
b100000 :
b100000 X
b10000 9
b10000 Y
b100000 >
b100000 T
b10000 =
b10000 U
0&"
1!
#45001
0!
#50001
0#"
b0 $
b0 2
b1010000 P
b1010000 |
b11010000 R
b11010000 ~
b11110000 Q
b11110000 }
b1010000 S
b1010000 !"
b1001110 &
b1001110 4
b1001110 G
06
b1000000 q
b10000000000000 z
b1000000 s
b1000000 v
b110000 p
b1110100000000000 {
b110000 r
b110000 w
b10 ?
b10 F
b10 ""
b10 ("
b10 %"
1&"
b1000000 ,
b1000000 J
b1000000 h
b1000000 +"
b110000 -
b110000 K
b110000 i
b110000 /"
1!
#55001
0!
#60001
16
1#"
b1 $
b1 2
b1010110 %
b1010110 3
b1010110 )"
b1000110 '
b1000110 D
b1010000 8
b1010000 Z
b11010000 7
b11010000 [
b11110000 <
b11110000 V
b1010000 ;
b1010000 W
b11100000 :
b11100000 X
b11100000 9
b11100000 Y
b1100000 >
b1100000 T
b1000000 =
b1000000 U
0&"
1!
#65001
0!
#70001
0#"
b0 $
b0 2
b1010000 Q
b1010000 }
b10110000 S
b10110000 !"
b10100000 P
b10100000 |
b100000 R
b100000 ~
b11000000 e
b10000000 g
b10000000 t
b11000000 d
b1100000 f
b1100000 u
b0 &
b0 4
b0 G
06
b11 ?
b11 F
b11 ""
b11 ("
b11 %"
1&"
b1101000000000000 c
b1100000 .
b1100000 L
b1100000 ^
b1100000 ,"
b1101100000000000 b
b1010000 /
b1010000 M
b1010000 _
b1010000 0"
1!
#75001
0!
#80001
16
1#"
b1 $
b1 2
b1111000 %
b1111000 3
b1111000 )"
b1101100 &
b1101100 4
b1101100 G
b11110000 '
b11110000 D
1@
b10110000 8
b10110000 Z
b100000 7
b100000 [
b1010000 <
b1010000 V
b10100000 ;
b10100000 W
b10000000 :
b10000000 X
b10010000 9
b10010000 Y
b0 >
b0 T
b11110000 =
b11110000 U
0&"
1!
#85001
0!
#90001
0#"
b0 $
b0 2
b100000 P
b100000 |
b10100000 R
b10100000 ~
b11100000 Q
b11100000 }
b100000 S
b100000 !"
b11000000 q
b1110000000000000 z
b11000000 s
b11000000 v
b11000000 p
b11000000000000 {
b10100000 r
b10100000 w
06
b111000 &
b111000 4
b111000 G
b0 ?
b0 F
b0 ""
b0 ("
b0 %"
1&"
b100000000000000 o
b10000000 0
b10000000 N
b10000000 j
b10000000 -"
b1100100000000000 n
b1110000 1
b1110000 O
b1110000 k
b1110000 1"
1B
1!
#95001
0!
#100001
b1101100 &
b1101100 4
b1101100 G
b10001000 '
b10001000 D
0B
b100000 8
b100000 Z
b10100000 7
b10100000 [
b11100000 <
b11100000 V
b100000 ;
b100000 W
b0 :
b0 X
b0 9
b0 Y
b10000000 >
b10000000 T
b10000000 =
b10000000 U
0&"
1!
#105001
0!
#110001
1!
#115001
0!
#120001
1!
#125001
0!
#130001
1!
#135001
0!
#140001
1!
#145001
0!
#150001
1!
#155001
0!
#160001
1!
#165001
0!
#170001
1!
#175001
0!
#180001
1!
#185001
0!
#190001
1!
#195001
0!
#200001
16
1#"
b1 $
b1 2
b0 %
b0 3
b0 )"
1!
#205001
0!
#210001
0#"
b0 $
b0 2
b11000000 Q
b11000000 }
b0 S
b0 !"
b10000 P
b10000 |
b10010000 R
b10010000 ~
06
b10100000 e
b1100000 g
b1100000 t
b10110000 d
b1010000 f
b1010000 u
b1 ?
b1 F
b1 ""
b1 ("
b1 %"
1&"
b0 *
b0 H
b0 \
b0 *"
b0 +
b0 I
b0 ]
b0 ."
1!
#215001
0!
#220001
16
1#"
b1 $
b1 2
b1110110 '
b1110110 D
b0 8
b0 Z
b10010000 7
b10010000 [
b11000000 <
b11000000 V
b10000 ;
b10000 W
b11100000 :
b11100000 X
b11110000 9
b11110000 Y
b1100000 >
b1100000 T
b1110000 =
b1110000 U
0&"
1!
#225001
0!
#230001
0#"
b0 $
b0 2
b11010000 P
b11010000 |
b11010000 R
b11010000 ~
b11110000 Q
b11110000 }
b11010000 S
b11010000 !"
06
b10000000 q
b1100000000000000 z
b10000000 s
b10000000 v
b10010000 p
b1100100000000000 {
b1110000 r
b1110000 w
b10 ?
b10 F
b10 ""
b10 ("
b10 %"
1&"
b0 ,
b0 J
b0 h
b0 +"
b0 -
b0 K
b0 i
b0 /"
1!
#235001
0!
#240001
16
1#"
b1 $
b1 2
b1000010 '
b1000010 D
b11010000 8
b11010000 Z
b11010000 7
b11010000 [
b11110000 <
b11110000 V
b11010000 ;
b11010000 W
b100000 :
b100000 X
b100000 9
b100000 Y
b100000 >
b100000 T
b1000000 =
b1000000 U
0&"
1!
#245001
0!
#250001
0#"
b0 $
b0 2
b10010000 Q
b10010000 }
b1110000 S
b1110000 !"
b10000000 P
b10000000 |
b10000000 R
b10000000 ~
b0 e
b0 g
b0 t
b0 d
b0 f
b0 u
06
b11 ?
b11 F
b11 ""
b11 ("
b11 %"
1&"
b0 c
b0 .
b0 L
b0 ^
b0 ,"
b0 b
b0 /
b0 M
b0 _
b0 0"
1!
#255001
0!
#260001
b10011000 '
b10011000 D
b1110000 8
b1110000 Z
b10000000 7
b10000000 [
b10010000 <
b10010000 V
b10000000 ;
b10000000 W
b10000000 :
b10000000 X
b1110000 9
b1110000 Y
b10000000 >
b10000000 T
b10010000 =
b10010000 U
0&"
1!
#260002
